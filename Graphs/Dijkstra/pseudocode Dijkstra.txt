// array of length n with large values
distances = [infinity] * n
distances[source] = 0

// min heap
heap = [(0, source)]

while (heap not empty) {
    curr_dist, node = heap.pop()
    if (curr_dist > distances[node]) {
        // optimization step: ignore current path if we found a better one
        continue;
    }

    for (nei, weight: [edges from node]) {
        dist = currDist + weight

        // add neighbor to heap if it creates a shorter path
        if (dist < distances[nei]) {
            distances[nei] = dist
            heap.push((dist, nei))
        }
    }
}